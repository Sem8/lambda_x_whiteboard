def zeros_to_right(arr):
  # partition array into 2 parts, one to hold ints, the other 0s
  # one left pointer, one right pointer 
  # check if the right pointer sees a int and the left pointer
  # sees a 0, swap them 
  # once we've swapped, increment left pointer 
  # decrement the right pointer 
  # if the left pointer sees a int, increment it 
  # if the right pointer sees a 0, decrement it 
  # when the right pointer reaches the 0 index 
  # when the left pointer reaches the end of the array
  # when the left and right pointers pass each other, 
  # stop looping 
​
  # handling counting ints 
​
  # [0, 0, 0, 0, 0]
​
  # [4, 2, 1, 5]
​
  # counting logic 
  # have a blank array; add indexes of every non-zero value 
  # pop them until the array is length 0, counting the number of
  # times we popped 
​
  left = 0 
  right = len(arr) - 1
  n_non_zeros = 0
​
  while left <= right:
    if arr[left] == 0 and arr[right] != 0:
      arr[left], arr[right] = arr[right], arr[left]
      left += 1
      right -= 1
      n_non_zeros += 1
    else:
      if arr[left] != 0:
        n_non_zeros += 1
        left += 1
      if arr[right] == 0:
        right -= 1
​
  # make another pass through the changed array 
  # for x in arr: 
  #   if x != 0:
  #     n_non_zeros += 1
  
  return n_non_zeros
​
# O(n): only one of the pointers moves and the other pointer 
# doesn't move 
​
print(zeros_to_right([0, 3, 1, 0, -2]))
print(zeros_to_right([4, 2, 1, 5]))
print(zeros_to_right([0, 0, 0, 0, 0]))
print(zeros_to_right([1, 2, 3, 0, 4, 0, 0]))
print(zeros_to_right([0, 0, 0, 0, 3, 2, 1]))